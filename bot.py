import gspread
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime
import json
import os
import asyncio
from google.oauth2.service_account import Credentials

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "8444538558:AAF3vHHUC4YZb6BZUfzGVETjVFTzXDSedis"
GOOGLE_SHEET_NAME = "–ñ–∏–∑–Ω–∏ —É—á–µ–Ω–∏–∫–æ–≤"
ADMIN_USERNAME = "niinaaaa"

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def get_google_sheets_client():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets"""
    creds_json = os.environ.get('GOOGLE_CREDENTIALS')
    
    if creds_json:
        try:
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º GOOGLE_CREDENTIALS –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            creds_dict = json.loads(creds_json)
            
            # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ scopes –¥–ª—è Google Sheets API
            SCOPES = [
                'https://www.googleapis.com/auth/spreadsheets',
                'https://www.googleapis.com/auth/drive'
            ]
            
            credentials = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
            client = gspread.authorize(credentials)
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets")
            return client
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    else:
        if os.path.exists('credentials.json'):
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º credentials.json –∏–∑ —Ñ–∞–π–ª–∞")
            return gspread.service_account(filename='credentials.json')
        else:
            raise FileNotFoundError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã credentials")

class GoogleSheetsManager:
    def __init__(self):
        try:
            self.gc = get_google_sheets_client()
            self.sheet = self.gc.open(GOOGLE_SHEET_NAME).sheet1
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Google –¢–∞–±–ª–∏—Ü–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–µ: {e}")
            raise

    def find_user_row(self, user_id):
        try:
            all_records = self.sheet.get_all_records()
            for i, record in enumerate(all_records, start=2):
                if str(record.get('Telegram ID', '')) == str(user_id):
                    return i
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None

    def get_user_balance(self, user_id):
        row = self.find_user_row(user_id)
        if row:
            try:
                balance = self.sheet.cell(row, 4).value
                return int(balance) if balance else 0
            except:
                return 0
        return None

    def register_user(self, user_id, username, full_name):
        if self.find_user_row(user_id):
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

        try:
            new_row = [
                str(user_id),
                f"@{username}" if username else "–±–µ–∑ username", 
                full_name,
                3,  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                3,  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ]
            self.sheet.append_row(new_row)
            logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} (ID: {user_id})")
            return True, "–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return False, f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}"

    def update_balance(self, user_id, new_balance, reason=""):
        """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        row = self.find_user_row(user_id)
        if not row:
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

        try:
            self.sheet.update_cell(row, 4, new_balance)
            self.sheet.update_cell(row, 5, new_balance)
            self.sheet.update_cell(row, 6, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_balance}. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            return True, "–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω"
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return False, f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}"

# === –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===
class BalanceNotifier:
    def __init__(self, application, sheets_manager):
        self.application = application
        self.sheets = sheets_manager
        self.last_balances = {}
        self.initialize_balances()

    def initialize_balances(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            all_records = self.sheets.sheet.get_all_records()
            for record in all_records:
                user_id = record.get('Telegram ID')
                balance = record.get('–ë–∞–ª–∞–Ω—Å', 0)
                if user_id:
                    self.last_balances[str(user_id)] = balance
            logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –±–∞–ª–∞–Ω—Å—ã –¥–ª—è {len(self.last_balances)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤: {e}")

    async def check_balance_changes(self, context: ContextTypes.DEFAULT_TYPE = None):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            all_records = self.sheets.sheet.get_all_records()
            changes_found = False

            for record in all_records:
                user_id = str(record.get('Telegram ID', ''))
                current_balance = record.get('–ë–∞–ª–∞–Ω—Å', 0)

                if user_id and user_id != 'None':
                    last_balance = self.last_balances.get(user_id)
                    
                    # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
                    if last_balance is not None and current_balance != last_balance:
                        changes_found = True
                        reason = "üìà –ë–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ω" if current_balance > last_balance else "üìâ –ë–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–µ–Ω"
                        
                        try:
                            await self.application.bot.send_message(
                                chat_id=int(user_id),
                                text=f"üí´ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!\n\n"
                                     f"üîÑ {reason}\n"
                                     f"üí´ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {current_balance} –∂–∏–∑–Ω–µ–π\n\n"
                                     f"üí° –ü—Ä–æ–≤–µ—Ä—å –¥–µ—Ç–∞–ª–∏: /balance"
                            )
                            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {user_id}: {e}")

                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        self.last_balances[user_id] = current_balance

            if changes_found:
                logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞: {e}")

# === –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ ===
class AdminTools:
    def __init__(self, sheets_manager):
        self.sheets = sheets_manager

    async def update_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ /update user_id ¬±—á–∏—Å–ª–æ –ø—Ä–∏—á–∏–Ω–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
        if update.message.from_user.username != ADMIN_USERNAME:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        if len(context.args) < 3:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                "üìù **–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
                "`/update USER_ID –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–†–ò–ß–ò–ù–ê`\n\n"
                "üî¢ **–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "`/update 361845909 +1 –î–æ—Å—Ä–æ—á–Ω–∞—è_—Å–¥–∞—á–∞_–î–ó`\n"
                "`/update 361845909 -1 –ü—Ä–æ—Å—Ä–æ—á–∫–∞_–∑–∞–¥–∞–Ω–∏—è`\n\n"
                "üí° **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è _ –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–æ–≤**"
            )
            return

        try:
            user_id = int(context.args[0])
            change = int(context.args[1])
            reason = ' '.join(context.args[2:]).replace('_', ' ')  # –ó–∞–º–µ–Ω—è–µ–º _ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            current_balance = self.sheets.get_user_balance(user_id)
            if current_balance is None:
                await update.message.reply_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            new_balance = current_balance + change
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –±–∞–ª–∞–Ω—Å –Ω–µ —É—à–µ–ª –≤ –º–∏–Ω—É—Å
            if new_balance < 0:
                new_balance = 0

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ
            success, message = self.sheets.update_balance(user_id, new_balance, reason)

            if success:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"üí´ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!\n\n"
                             f"üîÑ –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                             f"üí´ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –∂–∏–∑–Ω–µ–π\n\n"
                             f"üí° –ü–æ–¥—Ä–æ–±–Ω–µ–µ: /balance"
                    )
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É {user_id}: {e}")

                await update.message.reply_text(
                    f"‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                    f"üë§ –£—á–µ–Ω–∏–∫: {user_id}\n"
                    f"üí´ –ë—ã–ª–æ: {current_balance} ‚Üí –°—Ç–∞–ª–æ: {new_balance}\n"
                    f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
                )
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {message}")

        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
                "üìù **–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
                "`/update USER_ID –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–†–ò–ß–ò–ù–ê`\n\n"
                "üî¢ **–ü—Ä–∏–º–µ—Ä:**\n"
                "`/update 361845909 +1 –¢—ã_–º–æ–ª–æ–¥–µ—Ü`"
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ update_balance: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    
    try:
        sheets = GoogleSheetsManager()
        balance = sheets.get_user_balance(user_id)

        if balance is None:
            full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
            success, message = sheets.register_user(user_id, user.username, full_name)
            if success:
                await update.message.reply_text(
                    f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
                    f"‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!\n"
                    f"üí´ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: 3 –∂–∏–∑–Ω–∏\n\n"
                    f"üìä –ö–æ–º–∞–Ω–¥—ã:\n"
                    f"/balance - –£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
                    f"/help - –ü–æ–º–æ—â—å"
                )
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {message}")
        else:
            await update.message.reply_text(
                f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!\n\n"
                f"üí´ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –∂–∏–∑–Ω–µ–π"
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    
    try:
        sheets = GoogleSheetsManager()
        balance = sheets.get_user_balance(user_id)

        if balance is None:
            await update.message.reply_text("‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏ /start")
            return

        if balance >= 3:
            emoji = "üéâ"
            status = "–û—Ç–ª–∏—á–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
        elif balance == 2:
            emoji = "‚ö†Ô∏è"
            status = "–•–æ—Ä–æ—à–æ, –Ω–æ –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω!"
        elif balance == 1:
            emoji = "üîî"
            status = "–í–Ω–∏–º–∞–Ω–∏–µ! –û—Å—Ç–∞–ª–∞—Å—å 1 –∂–∏–∑–Ω—å!"
        else:
            emoji = "üö®"
            status = "–°—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å!"

        message = f"""
{emoji} –¢–≤–æ–π –±–∞–ª–∞–Ω—Å –∂–∏–∑–Ω–µ–π

üí´ –û—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π: {balance}
üìù –°—Ç–∞—Ç—É—Å: {status}
        """
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /balance: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ –∂–∏–∑–Ω–µ–π

üí´ –ß—Ç–æ —Ç–∞–∫–æ–µ –∂–∏–∑–Ω–∏?
- 3 –∂–∏–∑–Ω–∏ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞
- –ü—Ä–æ—Å—Ä–æ—á–∫–∞ –î–ó = -1 –∂–∏–∑–Ω—å
- 3 –ø—Ä–æ—Å—Ä–æ—á–∫–∏ = —Å–æ–∑–≤–æ–Ω

üéØ –ö–æ–º–∞–Ω–¥—ã:
/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
/balance - –ë–∞–ª–∞–Ω—Å
/help - –°–ø—Ä–∞–≤–∫–∞
    """
    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã: /start, /balance, /help")

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Math Life Bot...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–∞–±–ª–∏—Ü
        sheets_manager = GoogleSheetsManager()
        
        # –°–æ–∑–¥–∞–µ–º Application
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notifier = BalanceNotifier(application, sheets_manager)
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        admin_tools = AdminTools(sheets_manager)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("balance", balance_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("update", admin_tools.update_balance))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        application.job_queue.run_repeating(
            lambda context: asyncio.create_task(notifier.check_balance_changes(context)),
            interval=30,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            first=10      # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        )
        
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        print("ü§ñ MATH LIFE BOT –ó–ê–ü–£–©–ï–ù!")
        print("üîî –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
