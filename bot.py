import gspread
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from datetime import datetime
import json
import os
import time
from threading import Thread
from google.oauth2.service_account import Credentials

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "8444538558:AAF3vHHUC4YZb6BZUfzGVETjVFTzXDSedis"
GOOGLE_SHEET_NAME = "–ñ–∏–∑–Ω–∏ —É—á–µ–Ω–∏–∫–æ–≤"
ADMIN_USERNAME = "niinaaaa"

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def get_google_sheets_client():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets"""
    creds_json = os.environ.get('GOOGLE_CREDENTIALS')
    
    if creds_json:
        # Production: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        try:
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º GOOGLE_CREDENTIALS –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            creds_dict = json.loads(creds_json)
            
            # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ scopes –¥–ª—è Google Sheets API
            SCOPES = [
                'https://www.googleapis.com/auth/spreadsheets',
                'https://www.googleapis.com/auth/drive'
            ]
            
            credentials = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
            client = gspread.authorize(credentials)
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets")
            return client
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ GOOGLE_CREDENTIALS: {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    else:
        # Development: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª
        logger.info("‚ÑπÔ∏è GOOGLE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º credentials.json")
        if os.path.exists('credentials.json'):
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º credentials.json –∏–∑ —Ñ–∞–π–ª–∞")
            return gspread.service_account(filename='credentials.json')
        else:
            logger.error("‚ùå credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ GOOGLE_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            raise FileNotFoundError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã credentials –Ω–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –Ω–∏ –≤ —Ñ–∞–π–ª–µ")


# === –†–ê–ë–û–¢–ê –° GOOGLE TABLES ===
class GoogleSheetsManager:
    def __init__(self):
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            self.gc = get_google_sheets_client()
            self.sheet = self.gc.open(GOOGLE_SHEET_NAME).sheet1
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Google –¢–∞–±–ª–∏—Ü–µ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            test_value = self.sheet.acell('A1').value
            logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. A1: {test_value}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–µ: {e}")
            raise


    def find_user_row(self, user_id):
        """–ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        try:
            all_records = self.sheet.get_all_records()
            for i, record in enumerate(all_records, start=2):
                if str(record.get('Telegram ID', '')) == str(user_id):
                    return i
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None

    def get_user_balance(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        row = self.find_user_row(user_id)
        if row:
            try:
                balance = self.sheet.cell(row, 4).value
                return int(balance) if balance else 0
            except:
                return 0
        return None

    def register_user(self, user_id, username, full_name):
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.find_user_row(user_id):
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

        try:
            new_row = [
                str(user_id),
                f"@{username}" if username else "–±–µ–∑ username",
                full_name,
                3,  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                3,  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ]
            self.sheet.append_row(new_row)
            logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} (ID: {user_id})")
            return True, "–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return False, f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}"

    def update_balance(self, user_id, new_balance, reason=""):
        """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        row = self.find_user_row(user_id)
        if not row:
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

        try:
            self.sheet.update_cell(row, 4, new_balance)
            self.sheet.update_cell(row, 5, new_balance)
            self.sheet.update_cell(row, 6, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_balance}. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            return True, "–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω"
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return False, f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}"


# === –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===
class BalanceNotifier:
    def __init__(self, bot):
        self.bot = bot
        self.last_balances = {}

    def initialize_balances(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã"""
        try:
            all_records = self.bot.sheets.sheet.get_all_records()
            for record in all_records:
                user_id = record.get('Telegram ID')
                balance = record.get('–ë–∞–ª–∞–Ω—Å', 0)
                if user_id:
                    self.last_balances[int(user_id)] = balance
            logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –±–∞–ª–∞–Ω—Å—ã –¥–ª—è {len(self.last_balances)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤: {e}")

    async def check_balance_changes(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            all_records = self.bot.sheets.sheet.get_all_records()

            for record in all_records:
                user_id = record.get('Telegram ID')
                current_balance = record.get('–ë–∞–ª–∞–Ω—Å', 0)

                if user_id:
                    user_id = int(user_id)
                    last_balance = self.last_balances.get(user_id)

                    if last_balance is not None and current_balance != last_balance:
                        reason = "üìà –ë–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ω" if current_balance > last_balance else "üìâ –ë–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–µ–Ω"

                        try:
                            await self.bot.application.bot.send_message(
                                chat_id=user_id,
                                text=f"üí´ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!\n\n"
                                     f"üîÑ {reason}\n"
                                     f"üí´ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {current_balance} –∂–∏–∑–Ω–µ–π\n\n"
                                     f"üí° –ü—Ä–æ–≤–µ—Ä—å –¥–µ—Ç–∞–ª–∏: /balance"
                            )
                            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {user_id}")

                    self.last_balances[user_id] = current_balance

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞: {e}")


# === TELEGRAM BOT ===
class MathLifeBot:
    def __init__(self):
        self.sheets = GoogleSheetsManager()
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.notifier = BalanceNotifier(self)
        self._setup_handlers()

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("balance", self.balance_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("id", self.id_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.message.from_user
        user_id = user.id

        balance = self.sheets.get_user_balance(user_id)

        if balance is None:
            full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
            success, message = self.sheets.register_user(user_id, user.username, full_name)

            if success:
                welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!

‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!
üí´ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: 3 –∂–∏–∑–Ω–∏

üìä –ö–æ–º–∞–Ω–¥—ã:
/balance - –£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å
/id - –ú–æ–π ID –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
/help - –ü–æ–º–æ—â—å
                """
            else:
                welcome_text = f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {message}"
        else:
            welcome_text = f"""
üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!

üí´ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –∂–∏–∑–Ω–µ–π
            """

        await update.message.reply_text(welcome_text)
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    async def balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""
        user = update.message.from_user
        user_id = user.id

        balance = self.sheets.get_user_balance(user_id)

        if balance is None:
            await update.message.reply_text("‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏ /start")
            return

        if balance >= 3:
            emoji = "üéâ"
            status = "–û—Ç–ª–∏—á–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
        elif balance == 2:
            emoji = "‚ö†Ô∏è"
            status = "–•–æ—Ä–æ—à–æ, –Ω–æ –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω!"
        elif balance == 1:
            emoji = "üîî"
            status = "–í–Ω–∏–º–∞–Ω–∏–µ! –û—Å—Ç–∞–ª–∞—Å—å 1 –∂–∏–∑–Ω—å!"
        else:
            emoji = "üö®"
            status = "–°—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å!"

        message = f"""
{emoji} –¢–≤–æ–π –±–∞–ª–∞–Ω—Å –∂–∏–∑–Ω–µ–π

üí´ –û—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π: {balance}
üìù –°—Ç–∞—Ç—É—Å: {status}
        """

        await update.message.reply_text(message)

    async def id_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ ID"""
        user = update.message.from_user
        user_id = user.id

        await update.message.reply_text(f"üìã –¢–≤–æ–π ID: `{user_id}`", parse_mode='Markdown')

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ –∂–∏–∑–Ω–µ–π

üí´ –ß—Ç–æ —Ç–∞–∫–æ–µ –∂–∏–∑–Ω–∏?
- 3 –∂–∏–∑–Ω–∏ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞
- –ü—Ä–æ—Å—Ä–æ—á–∫–∞ –î–ó = -1 –∂–∏–∑–Ω—å
- 3 –ø—Ä–æ—Å—Ä–æ—á–∫–∏ = —Å–æ–∑–≤–æ–Ω

üéØ –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∂–∏–∑–Ω–∏?
- –î–æ—Å—Ä–æ—á–Ω–∞—è —Å–¥–∞—á–∞ = +1 –∂–∏–∑–Ω—å

üìä –ö–æ–º–∞–Ω–¥—ã:
/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
/balance - –ë–∞–ª–∞–Ω—Å
/id - –ú–æ–π ID
/help - –°–ø—Ä–∞–≤–∫–∞
        """
        await update.message.reply_text(help_text)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã: /start, /balance, /help")


# === –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ ===
class AdminTools:
    def __init__(self, bot):
        self.bot = bot

    async def update_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        if update.message.from_user.username != ADMIN_USERNAME:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        if len(context.args) < 3:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /update user_id ¬±—á–∏—Å–ª–æ '–ø—Ä–∏—á–∏–Ω–∞'")
            return

        try:
            user_id = int(context.args[0])
            change = int(context.args[1])
            reason = ' '.join(context.args[2:])

            current_balance = self.bot.sheets.get_user_balance(user_id)
            if current_balance is None:
                await update.message.reply_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            new_balance = current_balance + change
            success, message = self.bot.sheets.update_balance(user_id, new_balance, reason)

            if success:
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"üí´ –ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω: {new_balance}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
                    )
                except:
                    pass

                await update.message.reply_text(f"‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {new_balance}")
            else:
                await update.message.reply_text(f"‚ùå {message}")

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")


# === –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===
def run_notifier(bot):
    """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    def check_changes():
        while True:
            try:
                import asyncio
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(bot.notifier.check_balance_changes())
                loop.close()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    thread = Thread(target=check_changes, daemon=True)
    thread.start()


# === –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Math Life Bot...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if os.environ.get('GOOGLE_CREDENTIALS'):
        logger.info("‚úÖ GOOGLE_CREDENTIALS –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    else:
        logger.info("‚ÑπÔ∏è GOOGLE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è credentials.json")

    try:
        bot = MathLifeBot()
        admin_tools = AdminTools(bot)
        bot.application.add_handler(CommandHandler("update", admin_tools.update_balance))

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        bot.notifier.initialize_balances()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        run_notifier(bot)

        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞")
        print("\n" + "="*50)
        print("ü§ñ MATH LIFE BOT –ó–ê–ü–£–©–ï–ù!")
        print("üîî –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞")
        print("‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("="*50 + "\n")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ python-telegram-bot
        bot.application.run_polling()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == '__main__':
    main()
