import gspread
import logging
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from datetime import datetime
import json
import os
from google.oauth2.service_account import Credentials

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "8444538558:AAF3vHHUC4YZb6BZUfzGVETjVFTzXDSedis"
GOOGLE_SHEET_NAME = "–ñ–∏–∑–Ω–∏ —É—á–µ–Ω–∏–∫–æ–≤"
ADMIN_USERNAME = "niinaaaa"

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def get_google_sheets_client():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets"""
    creds_json = os.environ.get('GOOGLE_CREDENTIALS')
    
    if creds_json:
        try:
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º GOOGLE_CREDENTIALS –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            creds_dict = json.loads(creds_json)
            credentials = Credentials.from_service_account_info(creds_dict)
            client = gspread.authorize(credentials)
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets")
            return client
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    else:
        if os.path.exists('credentials.json'):
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º credentials.json –∏–∑ —Ñ–∞–π–ª–∞")
            return gspread.service_account(filename='credentials.json')
        else:
            raise FileNotFoundError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã credentials")

class GoogleSheetsManager:
    def __init__(self):
        try:
            self.gc = get_google_sheets_client()
            self.sheet = self.gc.open(GOOGLE_SHEET_NAME).sheet1
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Google –¢–∞–±–ª–∏—Ü–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–µ: {e}")
            raise

    def find_user_row(self, user_id):
        try:
            all_records = self.sheet.get_all_records()
            for i, record in enumerate(all_records, start=2):
                if str(record.get('Telegram ID', '')) == str(user_id):
                    return i
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None

    def get_user_balance(self, user_id):
        row = self.find_user_row(user_id)
        if row:
            try:
                balance = self.sheet.cell(row, 4).value
                return int(balance) if balance else 0
            except:
                return 0
        return None

    def register_user(self, user_id, username, full_name):
        if self.find_user_row(user_id):
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

        try:
            new_row = [
                str(user_id),
                f"@{username}" if username else "–±–µ–∑ username", 
                full_name,
                3,  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                3,  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ]
            self.sheet.append_row(new_row)
            logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} (ID: {user_id})")
            return True, "–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return False, f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}"

def start_command(update: Update, context: CallbackContext):
    user = update.message.from_user
    user_id = user.id
    
    try:
        sheets = GoogleSheetsManager()
        balance = sheets.get_user_balance(user_id)

        if balance is None:
            full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
            success, message = sheets.register_user(user_id, user.username, full_name)
            if success:
                update.message.reply_text(
                    f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
                    f"‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!\n"
                    f"üí´ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: 3 –∂–∏–∑–Ω–∏\n\n"
                    f"üìä –ö–æ–º–∞–Ω–¥—ã:\n"
                    f"/balance - –£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
                    f"/help - –ü–æ–º–æ—â—å"
                )
            else:
                update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {message}")
        else:
            update.message.reply_text(
                f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!\n\n"
                f"üí´ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –∂–∏–∑–Ω–µ–π"
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def balance_command(update: Update, context: CallbackContext):
    user = update.message.from_user
    user_id = user.id
    
    try:
        sheets = GoogleSheetsManager()
        balance = sheets.get_user_balance(user_id)

        if balance is None:
            update.message.reply_text("‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏ /start")
            return

        if balance >= 3:
            emoji = "üéâ"
            status = "–û—Ç–ª–∏—á–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
        elif balance == 2:
            emoji = "‚ö†Ô∏è"
            status = "–•–æ—Ä–æ—à–æ, –Ω–æ –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω!"
        elif balance == 1:
            emoji = "üîî"
            status = "–í–Ω–∏–º–∞–Ω–∏–µ! –û—Å—Ç–∞–ª–∞—Å—å 1 –∂–∏–∑–Ω—å!"
        else:
            emoji = "üö®"
            status = "–°—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å!"

        message = f"""
{emoji} –¢–≤–æ–π –±–∞–ª–∞–Ω—Å –∂–∏–∑–Ω–µ–π

üí´ –û—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π: {balance}
üìù –°—Ç–∞—Ç—É—Å: {status}
        """
        update.message.reply_text(message)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /balance: {e}")
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def help_command(update: Update, context: CallbackContext):
    help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ –∂–∏–∑–Ω–µ–π

üí´ –ß—Ç–æ —Ç–∞–∫–æ–µ –∂–∏–∑–Ω–∏?
- 3 –∂–∏–∑–Ω–∏ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞
- –ü—Ä–æ—Å—Ä–æ—á–∫–∞ –î–ó = -1 –∂–∏–∑–Ω—å
- 3 –ø—Ä–æ—Å—Ä–æ—á–∫–∏ = —Å–æ–∑–≤–æ–Ω

üéØ –ö–æ–º–∞–Ω–¥—ã:
/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
/balance - –ë–∞–ª–∞–Ω—Å
/help - –°–ø—Ä–∞–≤–∫–∞
    """
    update.message.reply_text(help_text)

def handle_message(update: Update, context: CallbackContext):
    update.message.reply_text("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã: /start, /balance, /help")

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Math Life Bot...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Updater –¥–ª—è –≤–µ—Ä—Å–∏–∏ 13.15
        updater = Updater(BOT_TOKEN, use_context=True)
        dispatcher = updater.dispatcher
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dispatcher.add_handler(CommandHandler("start", start_command))
        dispatcher.add_handler(CommandHandler("balance", balance_command))
        dispatcher.add_handler(CommandHandler("help", help_command))
        dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
        
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("ü§ñ MATH LIFE BOT –ó–ê–ü–£–©–ï–ù!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        updater.start_polling()
        updater.idle()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
